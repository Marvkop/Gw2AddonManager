name: release

on:
  push:
    tags:
      - '*.*.*'

jobs:

  release:
    runs-on: windows-latest

    env:
      Solution_Name: Gw2AddonManagement.sln
      Project_Directory: Gw2AddonManagement
      Project_Path: Gw2AddonManagement/Gw2AddonManagement.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    - name: Execute unit tests
      run: dotnet test

    - name: dotnet publish
      run: dotnet publish ${{ env.Project_Path }} -c RELEASE -r win-x64 --sc false -o ${{ env.Project_Directory }}\publish

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.Project_Directory }}\publish\Gw2AddonManagement.exe 
        asset_name: Gw2AddonManagement.exe 
        asset_content_type: application/vnd.microsoft.portable-executable
